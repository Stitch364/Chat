// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
insert into users(email,password)
values (?,?)
`

type CreateUserParams struct {
	Email    string
	Password string
}

// {email:string,password:string}
func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) error {
	_, err := q.exec(ctx, q.createUserStmt, createUser, arg.Email, arg.Password)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
delete
from users
where id = ?
`

// {id:int64}
func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, id)
	return err
}

const existEmail = `-- name: ExistEmail :one
select exists(select 1 from users where email = ?)
`

// {email:string}
func (q *Queries) ExistEmail(ctx context.Context, email string) (bool, error) {
	row := q.queryRow(ctx, q.existEmailStmt, existEmail, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const existsUserByID = `-- name: ExistsUserByID :one
select exists(select 1 from users where id = ?)
`

// {id:int64}
func (q *Queries) ExistsUserByID(ctx context.Context, id int64) (bool, error) {
	row := q.queryRow(ctx, q.existsUserByIDStmt, existsUserByID, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getAccountIDsByUserID = `-- name: GetAccountIDsByUserID :many
select id
from accounts
where user_id = ?
`

// {user_id:int64}
func (q *Queries) GetAccountIDsByUserID(ctx context.Context, userID int64) ([]int64, error) {
	rows, err := q.query(ctx, q.getAccountIDsByUserIDStmt, getAccountIDsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllEmail = `-- name: GetAllEmail :many
select email
from users
`

func (q *Queries) GetAllEmail(ctx context.Context) ([]string, error) {
	rows, err := q.query(ctx, q.getAllEmailStmt, getAllEmail)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var email string
		if err := rows.Scan(&email); err != nil {
			return nil, err
		}
		items = append(items, email)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, email, password, created_at
from users
where email = ?
limit 1
`

// {email:string}
func (q *Queries) GetUserByEmail(ctx context.Context, email string) (*User, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return &i, err
}

const getUserByID = `-- name: GetUserByID :one
select id, email, password, created_at
from users
where id = ?
limit 1
`

// {id:int64}
func (q *Queries) GetUserByID(ctx context.Context, id int64) (*User, error) {
	row := q.queryRow(ctx, q.getUserByIDStmt, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return &i, err
}

const updateUser = `-- name: UpdateUser :exec
update users
set email = ?,
    password = ?
where id = ?
`

type UpdateUserParams struct {
	Email    string
	Password string
	ID       int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg *UpdateUserParams) error {
	_, err := q.exec(ctx, q.updateUserStmt, updateUser, arg.Email, arg.Password, arg.ID)
	return err
}
