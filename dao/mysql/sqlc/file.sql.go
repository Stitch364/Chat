// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: file.sql

package db

import (
	"context"
	"database/sql"
)

const createFile = `-- name: CreateFile :exec
insert into files (file_name, file_type, file_size, file_key, url, relation_id, account_id)
values(?,?,?,?,?,?,?)
`

type CreateFileParams struct {
	FileName   string
	FileType   FilesFileType
	FileSize   int64
	FileKey    string
	Url        string
	RelationID sql.NullInt64
	AccountID  sql.NullInt64
}

func (q *Queries) CreateFile(ctx context.Context, arg *CreateFileParams) error {
	_, err := q.exec(ctx, q.createFileStmt, createFile,
		arg.FileName,
		arg.FileType,
		arg.FileSize,
		arg.FileKey,
		arg.Url,
		arg.RelationID,
		arg.AccountID,
	)
	return err
}

const deleteFileByID = `-- name: DeleteFileByID :exec
delete
from files
where id = ?
`

func (q *Queries) DeleteFileByID(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteFileByIDStmt, deleteFileByID, id)
	return err
}

const getCreateFile = `-- name: GetCreateFile :one
select id, file_name, file_type, file_size, file_key, url, relation_id, account_id, create_at
from files
where file_key = ?
`

func (q *Queries) GetCreateFile(ctx context.Context, fileKey string) (*File, error) {
	row := q.queryRow(ctx, q.getCreateFileStmt, getCreateFile, fileKey)
	var i File
	err := row.Scan(
		&i.ID,
		&i.FileName,
		&i.FileType,
		&i.FileSize,
		&i.FileKey,
		&i.Url,
		&i.RelationID,
		&i.AccountID,
		&i.CreateAt,
	)
	return &i, err
}

const getFileByRelation = `-- name: GetFileByRelation :many
select id, file_name, file_type, file_size, file_key, url, relation_id, account_id, create_at
from files
where relation_id = ?
`

func (q *Queries) GetFileByRelation(ctx context.Context, relationID sql.NullInt64) ([]*File, error) {
	rows, err := q.query(ctx, q.getFileByRelationStmt, getFileByRelation, relationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*File{}
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.FileName,
			&i.FileType,
			&i.FileSize,
			&i.FileKey,
			&i.Url,
			&i.RelationID,
			&i.AccountID,
			&i.CreateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFileByRelationID = `-- name: GetFileByRelationID :many
select id, file_name, file_type, file_size, file_key, url, relation_id, account_id, create_at
from files
where relation_id = ?
`

func (q *Queries) GetFileByRelationID(ctx context.Context, relationID sql.NullInt64) ([]*File, error) {
	rows, err := q.query(ctx, q.getFileByRelationIDStmt, getFileByRelationID, relationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*File{}
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.FileName,
			&i.FileType,
			&i.FileSize,
			&i.FileKey,
			&i.Url,
			&i.RelationID,
			&i.AccountID,
			&i.CreateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFileDetailsByID = `-- name: GetFileDetailsByID :one
select id, file_name, file_type, file_size, file_key, url, relation_id, account_id, create_at
from files
where id = ?
`

func (q *Queries) GetFileDetailsByID(ctx context.Context, id int64) (*File, error) {
	row := q.queryRow(ctx, q.getFileDetailsByIDStmt, getFileDetailsByID, id)
	var i File
	err := row.Scan(
		&i.ID,
		&i.FileName,
		&i.FileType,
		&i.FileSize,
		&i.FileKey,
		&i.Url,
		&i.RelationID,
		&i.AccountID,
		&i.CreateAt,
	)
	return &i, err
}

const getFileKeyByID = `-- name: GetFileKeyByID :one
select file_key
from files
where id = ?
`

func (q *Queries) GetFileKeyByID(ctx context.Context, id int64) (string, error) {
	row := q.queryRow(ctx, q.getFileKeyByIDStmt, getFileKeyByID, id)
	var file_key string
	err := row.Scan(&file_key)
	return file_key, err
}

const getGroupAvatar = `-- name: GetGroupAvatar :one
SELECT id, file_name, file_type, file_size, file_key, url, relation_id, account_id, create_at
FROM files
WHERE relation_id = ?
  AND account_id IS NULL
`

func (q *Queries) GetGroupAvatar(ctx context.Context, relationID sql.NullInt64) (*File, error) {
	row := q.queryRow(ctx, q.getGroupAvatarStmt, getGroupAvatar, relationID)
	var i File
	err := row.Scan(
		&i.ID,
		&i.FileName,
		&i.FileType,
		&i.FileSize,
		&i.FileKey,
		&i.Url,
		&i.RelationID,
		&i.AccountID,
		&i.CreateAt,
	)
	return &i, err
}

const updateGroupAvatar = `-- name: UpdateGroupAvatar :exec
UPDATE files
SET url = ?
WHERE relation_id = ? AND file_name = 'groupAvatar'
`

type UpdateGroupAvatarParams struct {
	Url        string
	RelationID sql.NullInt64
}

func (q *Queries) UpdateGroupAvatar(ctx context.Context, arg *UpdateGroupAvatarParams) error {
	_, err := q.exec(ctx, q.updateGroupAvatarStmt, updateGroupAvatar, arg.Url, arg.RelationID)
	return err
}
