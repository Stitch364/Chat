// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.countAccountsByUserIDStmt, err = db.PrepareContext(ctx, countAccountsByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query CountAccountsByUserID: %w", err)
	}
	if q.createAccountStmt, err = db.PrepareContext(ctx, createAccount); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAccount: %w", err)
	}
	if q.createApplicationStmt, err = db.PrepareContext(ctx, createApplication); err != nil {
		return nil, fmt.Errorf("error preparing query CreateApplication: %w", err)
	}
	if q.createFileStmt, err = db.PrepareContext(ctx, createFile); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFile: %w", err)
	}
	if q.createFriendRelationStmt, err = db.PrepareContext(ctx, createFriendRelation); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFriendRelation: %w", err)
	}
	if q.createGroupRelationStmt, err = db.PrepareContext(ctx, createGroupRelation); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGroupRelation: %w", err)
	}
	if q.createMessageStmt, err = db.PrepareContext(ctx, createMessage); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMessage: %w", err)
	}
	if q.createMessageReturnStmt, err = db.PrepareContext(ctx, createMessageReturn); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMessageReturn: %w", err)
	}
	if q.createSettingStmt, err = db.PrepareContext(ctx, createSetting); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSetting: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteAccountStmt, err = db.PrepareContext(ctx, deleteAccount); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAccount: %w", err)
	}
	if q.deleteAccountsByUserIDStmt, err = db.PrepareContext(ctx, deleteAccountsByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAccountsByUserID: %w", err)
	}
	if q.deleteApplicationStmt, err = db.PrepareContext(ctx, deleteApplication); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteApplication: %w", err)
	}
	if q.deleteFileByIDStmt, err = db.PrepareContext(ctx, deleteFileByID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFileByID: %w", err)
	}
	if q.deleteFriendRelationsByAccountIDStmt, err = db.PrepareContext(ctx, deleteFriendRelationsByAccountID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFriendRelationsByAccountID: %w", err)
	}
	if q.deleteRelationStmt, err = db.PrepareContext(ctx, deleteRelation); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRelation: %w", err)
	}
	if q.deleteSettingStmt, err = db.PrepareContext(ctx, deleteSetting); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSetting: %w", err)
	}
	if q.deleteSettingsByAccountIDStmt, err = db.PrepareContext(ctx, deleteSettingsByAccountID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSettingsByAccountID: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.existEmailStmt, err = db.PrepareContext(ctx, existEmail); err != nil {
		return nil, fmt.Errorf("error preparing query ExistEmail: %w", err)
	}
	if q.existRelationStmt, err = db.PrepareContext(ctx, existRelation); err != nil {
		return nil, fmt.Errorf("error preparing query ExistRelation: %w", err)
	}
	if q.existsAccountByIDStmt, err = db.PrepareContext(ctx, existsAccountByID); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsAccountByID: %w", err)
	}
	if q.existsAccountByNameAndUserIDStmt, err = db.PrepareContext(ctx, existsAccountByNameAndUserID); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsAccountByNameAndUserID: %w", err)
	}
	if q.existsApplicationByIDWithLockStmt, err = db.PrepareContext(ctx, existsApplicationByIDWithLock); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsApplicationByIDWithLock: %w", err)
	}
	if q.existsFriendRelationStmt, err = db.PrepareContext(ctx, existsFriendRelation); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsFriendRelation: %w", err)
	}
	if q.existsFriendSettingStmt, err = db.PrepareContext(ctx, existsFriendSetting); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsFriendSetting: %w", err)
	}
	if q.existsGroupLeaderByAccountIDWithLockStmt, err = db.PrepareContext(ctx, existsGroupLeaderByAccountIDWithLock); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsGroupLeaderByAccountIDWithLock: %w", err)
	}
	if q.existsIsLeaderStmt, err = db.PrepareContext(ctx, existsIsLeader); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsIsLeader: %w", err)
	}
	if q.existsSettingStmt, err = db.PrepareContext(ctx, existsSetting); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsSetting: %w", err)
	}
	if q.existsUserByIDStmt, err = db.PrepareContext(ctx, existsUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsUserByID: %w", err)
	}
	if q.getAccountByIDStmt, err = db.PrepareContext(ctx, getAccountByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountByID: %w", err)
	}
	if q.getAccountIDsByMsgIDStmt, err = db.PrepareContext(ctx, getAccountIDsByMsgID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountIDsByMsgID: %w", err)
	}
	if q.getAccountIDsByRelationIDStmt, err = db.PrepareContext(ctx, getAccountIDsByRelationID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountIDsByRelationID: %w", err)
	}
	if q.getAccountIDsByUserIDStmt, err = db.PrepareContext(ctx, getAccountIDsByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountIDsByUserID: %w", err)
	}
	if q.getAccountInfoByIDStmt, err = db.PrepareContext(ctx, getAccountInfoByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountInfoByID: %w", err)
	}
	if q.getAccountsByNameStmt, err = db.PrepareContext(ctx, getAccountsByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountsByName: %w", err)
	}
	if q.getAccountsByUserIDStmt, err = db.PrepareContext(ctx, getAccountsByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountsByUserID: %w", err)
	}
	if q.getAcountIDsByUserIDStmt, err = db.PrepareContext(ctx, getAcountIDsByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAcountIDsByUserID: %w", err)
	}
	if q.getAllEmailStmt, err = db.PrepareContext(ctx, getAllEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllEmail: %w", err)
	}
	if q.getAllGroupRelationStmt, err = db.PrepareContext(ctx, getAllGroupRelation); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllGroupRelation: %w", err)
	}
	if q.getAllRelationIDsStmt, err = db.PrepareContext(ctx, getAllRelationIDs); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllRelationIDs: %w", err)
	}
	if q.getAllRelationOnRelationStmt, err = db.PrepareContext(ctx, getAllRelationOnRelation); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllRelationOnRelation: %w", err)
	}
	if q.getApplicationByIDStmt, err = db.PrepareContext(ctx, getApplicationByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetApplicationByID: %w", err)
	}
	if q.getApplicationsStmt, err = db.PrepareContext(ctx, getApplications); err != nil {
		return nil, fmt.Errorf("error preparing query GetApplications: %w", err)
	}
	if q.getApplicationsCreatTimeStmt, err = db.PrepareContext(ctx, getApplicationsCreatTime); err != nil {
		return nil, fmt.Errorf("error preparing query GetApplicationsCreatTime: %w", err)
	}
	if q.getApplicationsStatusStmt, err = db.PrepareContext(ctx, getApplicationsStatus); err != nil {
		return nil, fmt.Errorf("error preparing query GetApplicationsStatus: %w", err)
	}
	if q.getCreateFileStmt, err = db.PrepareContext(ctx, getCreateFile); err != nil {
		return nil, fmt.Errorf("error preparing query GetCreateFile: %w", err)
	}
	if q.getFileByRelationStmt, err = db.PrepareContext(ctx, getFileByRelation); err != nil {
		return nil, fmt.Errorf("error preparing query GetFileByRelation: %w", err)
	}
	if q.getFileByRelationIDStmt, err = db.PrepareContext(ctx, getFileByRelationID); err != nil {
		return nil, fmt.Errorf("error preparing query GetFileByRelationID: %w", err)
	}
	if q.getFileDetailsByIDStmt, err = db.PrepareContext(ctx, getFileDetailsByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetFileDetailsByID: %w", err)
	}
	if q.getFileKeyByIDStmt, err = db.PrepareContext(ctx, getFileKeyByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetFileKeyByID: %w", err)
	}
	if q.getFriendPinSettingsOrderByPinTimeStmt, err = db.PrepareContext(ctx, getFriendPinSettingsOrderByPinTime); err != nil {
		return nil, fmt.Errorf("error preparing query GetFriendPinSettingsOrderByPinTime: %w", err)
	}
	if q.getFriendRelationByIDStmt, err = db.PrepareContext(ctx, getFriendRelationByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetFriendRelationByID: %w", err)
	}
	if q.getFriendRelationIDsByAccountIDStmt, err = db.PrepareContext(ctx, getFriendRelationIDsByAccountID); err != nil {
		return nil, fmt.Errorf("error preparing query GetFriendRelationIDsByAccountID: %w", err)
	}
	if q.getFriendRelationIdByID1AndID1Stmt, err = db.PrepareContext(ctx, getFriendRelationIdByID1AndID1); err != nil {
		return nil, fmt.Errorf("error preparing query GetFriendRelationIdByID1AndID1: %w", err)
	}
	if q.getFriendSettingsByNameStmt, err = db.PrepareContext(ctx, getFriendSettingsByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetFriendSettingsByName: %w", err)
	}
	if q.getFriendSettingsOrderByNameStmt, err = db.PrepareContext(ctx, getFriendSettingsOrderByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetFriendSettingsOrderByName: %w", err)
	}
	if q.getFriendShowSettingsOrderByShowTimeStmt, err = db.PrepareContext(ctx, getFriendShowSettingsOrderByShowTime); err != nil {
		return nil, fmt.Errorf("error preparing query GetFriendShowSettingsOrderByShowTime: %w", err)
	}
	if q.getGroupAvatarStmt, err = db.PrepareContext(ctx, getGroupAvatar); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroupAvatar: %w", err)
	}
	if q.getGroupAvatarByIDStmt, err = db.PrepareContext(ctx, getGroupAvatarByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroupAvatarByID: %w", err)
	}
	if q.getGroupListStmt, err = db.PrepareContext(ctx, getGroupList); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroupList: %w", err)
	}
	if q.getGroupMembersByIDStmt, err = db.PrepareContext(ctx, getGroupMembersByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroupMembersByID: %w", err)
	}
	if q.getGroupPinSettingsOrderByPinTimeStmt, err = db.PrepareContext(ctx, getGroupPinSettingsOrderByPinTime); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroupPinSettingsOrderByPinTime: %w", err)
	}
	if q.getGroupRelationByIDStmt, err = db.PrepareContext(ctx, getGroupRelationByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroupRelationByID: %w", err)
	}
	if q.getGroupRelationsIdStmt, err = db.PrepareContext(ctx, getGroupRelationsId); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroupRelationsId: %w", err)
	}
	if q.getGroupSettingsByNameStmt, err = db.PrepareContext(ctx, getGroupSettingsByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroupSettingsByName: %w", err)
	}
	if q.getGroupShowSettingsOrderByShowTimeStmt, err = db.PrepareContext(ctx, getGroupShowSettingsOrderByShowTime); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroupShowSettingsOrderByShowTime: %w", err)
	}
	if q.getMessageAndNameByIDStmt, err = db.PrepareContext(ctx, getMessageAndNameByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetMessageAndNameByID: %w", err)
	}
	if q.getMessageByIDStmt, err = db.PrepareContext(ctx, getMessageByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetMessageByID: %w", err)
	}
	if q.getMessageInfoTxStmt, err = db.PrepareContext(ctx, getMessageInfoTx); err != nil {
		return nil, fmt.Errorf("error preparing query GetMessageInfoTx: %w", err)
	}
	if q.getMsgDeleteByIdStmt, err = db.PrepareContext(ctx, getMsgDeleteById); err != nil {
		return nil, fmt.Errorf("error preparing query GetMsgDeleteById: %w", err)
	}
	if q.getMsgsByContentStmt, err = db.PrepareContext(ctx, getMsgsByContent); err != nil {
		return nil, fmt.Errorf("error preparing query GetMsgsByContent: %w", err)
	}
	if q.getMsgsByContentAndRelationStmt, err = db.PrepareContext(ctx, getMsgsByContentAndRelation); err != nil {
		return nil, fmt.Errorf("error preparing query GetMsgsByContentAndRelation: %w", err)
	}
	if q.getMsgsByRelationIDAndTimeStmt, err = db.PrepareContext(ctx, getMsgsByRelationIDAndTime); err != nil {
		return nil, fmt.Errorf("error preparing query GetMsgsByRelationIDAndTime: %w", err)
	}
	if q.getNickNameByAccountIDAndRelationStmt, err = db.PrepareContext(ctx, getNickNameByAccountIDAndRelation); err != nil {
		return nil, fmt.Errorf("error preparing query GetNickNameByAccountIDAndRelation: %w", err)
	}
	if q.getPinMsgsByRelationIDStmt, err = db.PrepareContext(ctx, getPinMsgsByRelationID); err != nil {
		return nil, fmt.Errorf("error preparing query GetPinMsgsByRelationID: %w", err)
	}
	if q.getRelationIDByAccountIDStmt, err = db.PrepareContext(ctx, getRelationIDByAccountID); err != nil {
		return nil, fmt.Errorf("error preparing query GetRelationIDByAccountID: %w", err)
	}
	if q.getRelationIDsByAccountIDFromSettingsStmt, err = db.PrepareContext(ctx, getRelationIDsByAccountIDFromSettings); err != nil {
		return nil, fmt.Errorf("error preparing query GetRelationIDsByAccountIDFromSettings: %w", err)
	}
	if q.getRlyMsgsInfoByMsgIDStmt, err = db.PrepareContext(ctx, getRlyMsgsInfoByMsgID); err != nil {
		return nil, fmt.Errorf("error preparing query GetRlyMsgsInfoByMsgID: %w", err)
	}
	if q.getSettingByIDStmt, err = db.PrepareContext(ctx, getSettingByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetSettingByID: %w", err)
	}
	if q.getTopMsgByRelationIDStmt, err = db.PrepareContext(ctx, getTopMsgByRelationID); err != nil {
		return nil, fmt.Errorf("error preparing query GetTopMsgByRelationID: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.offerMsgsByAccountIDAndTimeStmt, err = db.PrepareContext(ctx, offerMsgsByAccountIDAndTime); err != nil {
		return nil, fmt.Errorf("error preparing query OfferMsgsByAccountIDAndTime: %w", err)
	}
	if q.transferIsLeaderFalseStmt, err = db.PrepareContext(ctx, transferIsLeaderFalse); err != nil {
		return nil, fmt.Errorf("error preparing query TransferIsLeaderFalse: %w", err)
	}
	if q.transferIsLeaderTrueStmt, err = db.PrepareContext(ctx, transferIsLeaderTrue); err != nil {
		return nil, fmt.Errorf("error preparing query TransferIsLeaderTrue: %w", err)
	}
	if q.updateAccountStmt, err = db.PrepareContext(ctx, updateAccount); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAccount: %w", err)
	}
	if q.updateAccountAvatarStmt, err = db.PrepareContext(ctx, updateAccountAvatar); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAccountAvatar: %w", err)
	}
	if q.updateApplicationStmt, err = db.PrepareContext(ctx, updateApplication); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateApplication: %w", err)
	}
	if q.updateGroupAvatarStmt, err = db.PrepareContext(ctx, updateGroupAvatar); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGroupAvatar: %w", err)
	}
	if q.updateGroupRelationStmt, err = db.PrepareContext(ctx, updateGroupRelation); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGroupRelation: %w", err)
	}
	if q.updateMsgDeleteStmt, err = db.PrepareContext(ctx, updateMsgDelete); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMsgDelete: %w", err)
	}
	if q.updateMsgPinStmt, err = db.PrepareContext(ctx, updateMsgPin); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMsgPin: %w", err)
	}
	if q.updateMsgRevokeStmt, err = db.PrepareContext(ctx, updateMsgRevoke); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMsgRevoke: %w", err)
	}
	if q.updateMsgTopStmt, err = db.PrepareContext(ctx, updateMsgTop); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMsgTop: %w", err)
	}
	if q.updateSettingDisturbStmt, err = db.PrepareContext(ctx, updateSettingDisturb); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSettingDisturb: %w", err)
	}
	if q.updateSettingLeaderStmt, err = db.PrepareContext(ctx, updateSettingLeader); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSettingLeader: %w", err)
	}
	if q.updateSettingNickNameStmt, err = db.PrepareContext(ctx, updateSettingNickName); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSettingNickName: %w", err)
	}
	if q.updateSettingPinStmt, err = db.PrepareContext(ctx, updateSettingPin); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSettingPin: %w", err)
	}
	if q.updateSettingShowStmt, err = db.PrepareContext(ctx, updateSettingShow); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSettingShow: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.countAccountsByUserIDStmt != nil {
		if cerr := q.countAccountsByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countAccountsByUserIDStmt: %w", cerr)
		}
	}
	if q.createAccountStmt != nil {
		if cerr := q.createAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAccountStmt: %w", cerr)
		}
	}
	if q.createApplicationStmt != nil {
		if cerr := q.createApplicationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createApplicationStmt: %w", cerr)
		}
	}
	if q.createFileStmt != nil {
		if cerr := q.createFileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFileStmt: %w", cerr)
		}
	}
	if q.createFriendRelationStmt != nil {
		if cerr := q.createFriendRelationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFriendRelationStmt: %w", cerr)
		}
	}
	if q.createGroupRelationStmt != nil {
		if cerr := q.createGroupRelationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGroupRelationStmt: %w", cerr)
		}
	}
	if q.createMessageStmt != nil {
		if cerr := q.createMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMessageStmt: %w", cerr)
		}
	}
	if q.createMessageReturnStmt != nil {
		if cerr := q.createMessageReturnStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMessageReturnStmt: %w", cerr)
		}
	}
	if q.createSettingStmt != nil {
		if cerr := q.createSettingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSettingStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteAccountStmt != nil {
		if cerr := q.deleteAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAccountStmt: %w", cerr)
		}
	}
	if q.deleteAccountsByUserIDStmt != nil {
		if cerr := q.deleteAccountsByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAccountsByUserIDStmt: %w", cerr)
		}
	}
	if q.deleteApplicationStmt != nil {
		if cerr := q.deleteApplicationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteApplicationStmt: %w", cerr)
		}
	}
	if q.deleteFileByIDStmt != nil {
		if cerr := q.deleteFileByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFileByIDStmt: %w", cerr)
		}
	}
	if q.deleteFriendRelationsByAccountIDStmt != nil {
		if cerr := q.deleteFriendRelationsByAccountIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFriendRelationsByAccountIDStmt: %w", cerr)
		}
	}
	if q.deleteRelationStmt != nil {
		if cerr := q.deleteRelationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRelationStmt: %w", cerr)
		}
	}
	if q.deleteSettingStmt != nil {
		if cerr := q.deleteSettingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSettingStmt: %w", cerr)
		}
	}
	if q.deleteSettingsByAccountIDStmt != nil {
		if cerr := q.deleteSettingsByAccountIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSettingsByAccountIDStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.existEmailStmt != nil {
		if cerr := q.existEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existEmailStmt: %w", cerr)
		}
	}
	if q.existRelationStmt != nil {
		if cerr := q.existRelationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existRelationStmt: %w", cerr)
		}
	}
	if q.existsAccountByIDStmt != nil {
		if cerr := q.existsAccountByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsAccountByIDStmt: %w", cerr)
		}
	}
	if q.existsAccountByNameAndUserIDStmt != nil {
		if cerr := q.existsAccountByNameAndUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsAccountByNameAndUserIDStmt: %w", cerr)
		}
	}
	if q.existsApplicationByIDWithLockStmt != nil {
		if cerr := q.existsApplicationByIDWithLockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsApplicationByIDWithLockStmt: %w", cerr)
		}
	}
	if q.existsFriendRelationStmt != nil {
		if cerr := q.existsFriendRelationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsFriendRelationStmt: %w", cerr)
		}
	}
	if q.existsFriendSettingStmt != nil {
		if cerr := q.existsFriendSettingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsFriendSettingStmt: %w", cerr)
		}
	}
	if q.existsGroupLeaderByAccountIDWithLockStmt != nil {
		if cerr := q.existsGroupLeaderByAccountIDWithLockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsGroupLeaderByAccountIDWithLockStmt: %w", cerr)
		}
	}
	if q.existsIsLeaderStmt != nil {
		if cerr := q.existsIsLeaderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsIsLeaderStmt: %w", cerr)
		}
	}
	if q.existsSettingStmt != nil {
		if cerr := q.existsSettingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsSettingStmt: %w", cerr)
		}
	}
	if q.existsUserByIDStmt != nil {
		if cerr := q.existsUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsUserByIDStmt: %w", cerr)
		}
	}
	if q.getAccountByIDStmt != nil {
		if cerr := q.getAccountByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountByIDStmt: %w", cerr)
		}
	}
	if q.getAccountIDsByMsgIDStmt != nil {
		if cerr := q.getAccountIDsByMsgIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountIDsByMsgIDStmt: %w", cerr)
		}
	}
	if q.getAccountIDsByRelationIDStmt != nil {
		if cerr := q.getAccountIDsByRelationIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountIDsByRelationIDStmt: %w", cerr)
		}
	}
	if q.getAccountIDsByUserIDStmt != nil {
		if cerr := q.getAccountIDsByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountIDsByUserIDStmt: %w", cerr)
		}
	}
	if q.getAccountInfoByIDStmt != nil {
		if cerr := q.getAccountInfoByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountInfoByIDStmt: %w", cerr)
		}
	}
	if q.getAccountsByNameStmt != nil {
		if cerr := q.getAccountsByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountsByNameStmt: %w", cerr)
		}
	}
	if q.getAccountsByUserIDStmt != nil {
		if cerr := q.getAccountsByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountsByUserIDStmt: %w", cerr)
		}
	}
	if q.getAcountIDsByUserIDStmt != nil {
		if cerr := q.getAcountIDsByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAcountIDsByUserIDStmt: %w", cerr)
		}
	}
	if q.getAllEmailStmt != nil {
		if cerr := q.getAllEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllEmailStmt: %w", cerr)
		}
	}
	if q.getAllGroupRelationStmt != nil {
		if cerr := q.getAllGroupRelationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllGroupRelationStmt: %w", cerr)
		}
	}
	if q.getAllRelationIDsStmt != nil {
		if cerr := q.getAllRelationIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllRelationIDsStmt: %w", cerr)
		}
	}
	if q.getAllRelationOnRelationStmt != nil {
		if cerr := q.getAllRelationOnRelationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllRelationOnRelationStmt: %w", cerr)
		}
	}
	if q.getApplicationByIDStmt != nil {
		if cerr := q.getApplicationByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getApplicationByIDStmt: %w", cerr)
		}
	}
	if q.getApplicationsStmt != nil {
		if cerr := q.getApplicationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getApplicationsStmt: %w", cerr)
		}
	}
	if q.getApplicationsCreatTimeStmt != nil {
		if cerr := q.getApplicationsCreatTimeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getApplicationsCreatTimeStmt: %w", cerr)
		}
	}
	if q.getApplicationsStatusStmt != nil {
		if cerr := q.getApplicationsStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getApplicationsStatusStmt: %w", cerr)
		}
	}
	if q.getCreateFileStmt != nil {
		if cerr := q.getCreateFileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCreateFileStmt: %w", cerr)
		}
	}
	if q.getFileByRelationStmt != nil {
		if cerr := q.getFileByRelationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFileByRelationStmt: %w", cerr)
		}
	}
	if q.getFileByRelationIDStmt != nil {
		if cerr := q.getFileByRelationIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFileByRelationIDStmt: %w", cerr)
		}
	}
	if q.getFileDetailsByIDStmt != nil {
		if cerr := q.getFileDetailsByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFileDetailsByIDStmt: %w", cerr)
		}
	}
	if q.getFileKeyByIDStmt != nil {
		if cerr := q.getFileKeyByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFileKeyByIDStmt: %w", cerr)
		}
	}
	if q.getFriendPinSettingsOrderByPinTimeStmt != nil {
		if cerr := q.getFriendPinSettingsOrderByPinTimeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFriendPinSettingsOrderByPinTimeStmt: %w", cerr)
		}
	}
	if q.getFriendRelationByIDStmt != nil {
		if cerr := q.getFriendRelationByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFriendRelationByIDStmt: %w", cerr)
		}
	}
	if q.getFriendRelationIDsByAccountIDStmt != nil {
		if cerr := q.getFriendRelationIDsByAccountIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFriendRelationIDsByAccountIDStmt: %w", cerr)
		}
	}
	if q.getFriendRelationIdByID1AndID1Stmt != nil {
		if cerr := q.getFriendRelationIdByID1AndID1Stmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFriendRelationIdByID1AndID1Stmt: %w", cerr)
		}
	}
	if q.getFriendSettingsByNameStmt != nil {
		if cerr := q.getFriendSettingsByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFriendSettingsByNameStmt: %w", cerr)
		}
	}
	if q.getFriendSettingsOrderByNameStmt != nil {
		if cerr := q.getFriendSettingsOrderByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFriendSettingsOrderByNameStmt: %w", cerr)
		}
	}
	if q.getFriendShowSettingsOrderByShowTimeStmt != nil {
		if cerr := q.getFriendShowSettingsOrderByShowTimeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFriendShowSettingsOrderByShowTimeStmt: %w", cerr)
		}
	}
	if q.getGroupAvatarStmt != nil {
		if cerr := q.getGroupAvatarStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupAvatarStmt: %w", cerr)
		}
	}
	if q.getGroupAvatarByIDStmt != nil {
		if cerr := q.getGroupAvatarByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupAvatarByIDStmt: %w", cerr)
		}
	}
	if q.getGroupListStmt != nil {
		if cerr := q.getGroupListStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupListStmt: %w", cerr)
		}
	}
	if q.getGroupMembersByIDStmt != nil {
		if cerr := q.getGroupMembersByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupMembersByIDStmt: %w", cerr)
		}
	}
	if q.getGroupPinSettingsOrderByPinTimeStmt != nil {
		if cerr := q.getGroupPinSettingsOrderByPinTimeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupPinSettingsOrderByPinTimeStmt: %w", cerr)
		}
	}
	if q.getGroupRelationByIDStmt != nil {
		if cerr := q.getGroupRelationByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupRelationByIDStmt: %w", cerr)
		}
	}
	if q.getGroupRelationsIdStmt != nil {
		if cerr := q.getGroupRelationsIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupRelationsIdStmt: %w", cerr)
		}
	}
	if q.getGroupSettingsByNameStmt != nil {
		if cerr := q.getGroupSettingsByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupSettingsByNameStmt: %w", cerr)
		}
	}
	if q.getGroupShowSettingsOrderByShowTimeStmt != nil {
		if cerr := q.getGroupShowSettingsOrderByShowTimeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupShowSettingsOrderByShowTimeStmt: %w", cerr)
		}
	}
	if q.getMessageAndNameByIDStmt != nil {
		if cerr := q.getMessageAndNameByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMessageAndNameByIDStmt: %w", cerr)
		}
	}
	if q.getMessageByIDStmt != nil {
		if cerr := q.getMessageByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMessageByIDStmt: %w", cerr)
		}
	}
	if q.getMessageInfoTxStmt != nil {
		if cerr := q.getMessageInfoTxStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMessageInfoTxStmt: %w", cerr)
		}
	}
	if q.getMsgDeleteByIdStmt != nil {
		if cerr := q.getMsgDeleteByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMsgDeleteByIdStmt: %w", cerr)
		}
	}
	if q.getMsgsByContentStmt != nil {
		if cerr := q.getMsgsByContentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMsgsByContentStmt: %w", cerr)
		}
	}
	if q.getMsgsByContentAndRelationStmt != nil {
		if cerr := q.getMsgsByContentAndRelationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMsgsByContentAndRelationStmt: %w", cerr)
		}
	}
	if q.getMsgsByRelationIDAndTimeStmt != nil {
		if cerr := q.getMsgsByRelationIDAndTimeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMsgsByRelationIDAndTimeStmt: %w", cerr)
		}
	}
	if q.getNickNameByAccountIDAndRelationStmt != nil {
		if cerr := q.getNickNameByAccountIDAndRelationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNickNameByAccountIDAndRelationStmt: %w", cerr)
		}
	}
	if q.getPinMsgsByRelationIDStmt != nil {
		if cerr := q.getPinMsgsByRelationIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPinMsgsByRelationIDStmt: %w", cerr)
		}
	}
	if q.getRelationIDByAccountIDStmt != nil {
		if cerr := q.getRelationIDByAccountIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRelationIDByAccountIDStmt: %w", cerr)
		}
	}
	if q.getRelationIDsByAccountIDFromSettingsStmt != nil {
		if cerr := q.getRelationIDsByAccountIDFromSettingsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRelationIDsByAccountIDFromSettingsStmt: %w", cerr)
		}
	}
	if q.getRlyMsgsInfoByMsgIDStmt != nil {
		if cerr := q.getRlyMsgsInfoByMsgIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRlyMsgsInfoByMsgIDStmt: %w", cerr)
		}
	}
	if q.getSettingByIDStmt != nil {
		if cerr := q.getSettingByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSettingByIDStmt: %w", cerr)
		}
	}
	if q.getTopMsgByRelationIDStmt != nil {
		if cerr := q.getTopMsgByRelationIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTopMsgByRelationIDStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.offerMsgsByAccountIDAndTimeStmt != nil {
		if cerr := q.offerMsgsByAccountIDAndTimeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing offerMsgsByAccountIDAndTimeStmt: %w", cerr)
		}
	}
	if q.transferIsLeaderFalseStmt != nil {
		if cerr := q.transferIsLeaderFalseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing transferIsLeaderFalseStmt: %w", cerr)
		}
	}
	if q.transferIsLeaderTrueStmt != nil {
		if cerr := q.transferIsLeaderTrueStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing transferIsLeaderTrueStmt: %w", cerr)
		}
	}
	if q.updateAccountStmt != nil {
		if cerr := q.updateAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAccountStmt: %w", cerr)
		}
	}
	if q.updateAccountAvatarStmt != nil {
		if cerr := q.updateAccountAvatarStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAccountAvatarStmt: %w", cerr)
		}
	}
	if q.updateApplicationStmt != nil {
		if cerr := q.updateApplicationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateApplicationStmt: %w", cerr)
		}
	}
	if q.updateGroupAvatarStmt != nil {
		if cerr := q.updateGroupAvatarStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGroupAvatarStmt: %w", cerr)
		}
	}
	if q.updateGroupRelationStmt != nil {
		if cerr := q.updateGroupRelationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGroupRelationStmt: %w", cerr)
		}
	}
	if q.updateMsgDeleteStmt != nil {
		if cerr := q.updateMsgDeleteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMsgDeleteStmt: %w", cerr)
		}
	}
	if q.updateMsgPinStmt != nil {
		if cerr := q.updateMsgPinStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMsgPinStmt: %w", cerr)
		}
	}
	if q.updateMsgRevokeStmt != nil {
		if cerr := q.updateMsgRevokeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMsgRevokeStmt: %w", cerr)
		}
	}
	if q.updateMsgTopStmt != nil {
		if cerr := q.updateMsgTopStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMsgTopStmt: %w", cerr)
		}
	}
	if q.updateSettingDisturbStmt != nil {
		if cerr := q.updateSettingDisturbStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSettingDisturbStmt: %w", cerr)
		}
	}
	if q.updateSettingLeaderStmt != nil {
		if cerr := q.updateSettingLeaderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSettingLeaderStmt: %w", cerr)
		}
	}
	if q.updateSettingNickNameStmt != nil {
		if cerr := q.updateSettingNickNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSettingNickNameStmt: %w", cerr)
		}
	}
	if q.updateSettingPinStmt != nil {
		if cerr := q.updateSettingPinStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSettingPinStmt: %w", cerr)
		}
	}
	if q.updateSettingShowStmt != nil {
		if cerr := q.updateSettingShowStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSettingShowStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                        DBTX
	tx                                        *sql.Tx
	countAccountsByUserIDStmt                 *sql.Stmt
	createAccountStmt                         *sql.Stmt
	createApplicationStmt                     *sql.Stmt
	createFileStmt                            *sql.Stmt
	createFriendRelationStmt                  *sql.Stmt
	createGroupRelationStmt                   *sql.Stmt
	createMessageStmt                         *sql.Stmt
	createMessageReturnStmt                   *sql.Stmt
	createSettingStmt                         *sql.Stmt
	createUserStmt                            *sql.Stmt
	deleteAccountStmt                         *sql.Stmt
	deleteAccountsByUserIDStmt                *sql.Stmt
	deleteApplicationStmt                     *sql.Stmt
	deleteFileByIDStmt                        *sql.Stmt
	deleteFriendRelationsByAccountIDStmt      *sql.Stmt
	deleteRelationStmt                        *sql.Stmt
	deleteSettingStmt                         *sql.Stmt
	deleteSettingsByAccountIDStmt             *sql.Stmt
	deleteUserStmt                            *sql.Stmt
	existEmailStmt                            *sql.Stmt
	existRelationStmt                         *sql.Stmt
	existsAccountByIDStmt                     *sql.Stmt
	existsAccountByNameAndUserIDStmt          *sql.Stmt
	existsApplicationByIDWithLockStmt         *sql.Stmt
	existsFriendRelationStmt                  *sql.Stmt
	existsFriendSettingStmt                   *sql.Stmt
	existsGroupLeaderByAccountIDWithLockStmt  *sql.Stmt
	existsIsLeaderStmt                        *sql.Stmt
	existsSettingStmt                         *sql.Stmt
	existsUserByIDStmt                        *sql.Stmt
	getAccountByIDStmt                        *sql.Stmt
	getAccountIDsByMsgIDStmt                  *sql.Stmt
	getAccountIDsByRelationIDStmt             *sql.Stmt
	getAccountIDsByUserIDStmt                 *sql.Stmt
	getAccountInfoByIDStmt                    *sql.Stmt
	getAccountsByNameStmt                     *sql.Stmt
	getAccountsByUserIDStmt                   *sql.Stmt
	getAcountIDsByUserIDStmt                  *sql.Stmt
	getAllEmailStmt                           *sql.Stmt
	getAllGroupRelationStmt                   *sql.Stmt
	getAllRelationIDsStmt                     *sql.Stmt
	getAllRelationOnRelationStmt              *sql.Stmt
	getApplicationByIDStmt                    *sql.Stmt
	getApplicationsStmt                       *sql.Stmt
	getApplicationsCreatTimeStmt              *sql.Stmt
	getApplicationsStatusStmt                 *sql.Stmt
	getCreateFileStmt                         *sql.Stmt
	getFileByRelationStmt                     *sql.Stmt
	getFileByRelationIDStmt                   *sql.Stmt
	getFileDetailsByIDStmt                    *sql.Stmt
	getFileKeyByIDStmt                        *sql.Stmt
	getFriendPinSettingsOrderByPinTimeStmt    *sql.Stmt
	getFriendRelationByIDStmt                 *sql.Stmt
	getFriendRelationIDsByAccountIDStmt       *sql.Stmt
	getFriendRelationIdByID1AndID1Stmt        *sql.Stmt
	getFriendSettingsByNameStmt               *sql.Stmt
	getFriendSettingsOrderByNameStmt          *sql.Stmt
	getFriendShowSettingsOrderByShowTimeStmt  *sql.Stmt
	getGroupAvatarStmt                        *sql.Stmt
	getGroupAvatarByIDStmt                    *sql.Stmt
	getGroupListStmt                          *sql.Stmt
	getGroupMembersByIDStmt                   *sql.Stmt
	getGroupPinSettingsOrderByPinTimeStmt     *sql.Stmt
	getGroupRelationByIDStmt                  *sql.Stmt
	getGroupRelationsIdStmt                   *sql.Stmt
	getGroupSettingsByNameStmt                *sql.Stmt
	getGroupShowSettingsOrderByShowTimeStmt   *sql.Stmt
	getMessageAndNameByIDStmt                 *sql.Stmt
	getMessageByIDStmt                        *sql.Stmt
	getMessageInfoTxStmt                      *sql.Stmt
	getMsgDeleteByIdStmt                      *sql.Stmt
	getMsgsByContentStmt                      *sql.Stmt
	getMsgsByContentAndRelationStmt           *sql.Stmt
	getMsgsByRelationIDAndTimeStmt            *sql.Stmt
	getNickNameByAccountIDAndRelationStmt     *sql.Stmt
	getPinMsgsByRelationIDStmt                *sql.Stmt
	getRelationIDByAccountIDStmt              *sql.Stmt
	getRelationIDsByAccountIDFromSettingsStmt *sql.Stmt
	getRlyMsgsInfoByMsgIDStmt                 *sql.Stmt
	getSettingByIDStmt                        *sql.Stmt
	getTopMsgByRelationIDStmt                 *sql.Stmt
	getUserByEmailStmt                        *sql.Stmt
	getUserByIDStmt                           *sql.Stmt
	offerMsgsByAccountIDAndTimeStmt           *sql.Stmt
	transferIsLeaderFalseStmt                 *sql.Stmt
	transferIsLeaderTrueStmt                  *sql.Stmt
	updateAccountStmt                         *sql.Stmt
	updateAccountAvatarStmt                   *sql.Stmt
	updateApplicationStmt                     *sql.Stmt
	updateGroupAvatarStmt                     *sql.Stmt
	updateGroupRelationStmt                   *sql.Stmt
	updateMsgDeleteStmt                       *sql.Stmt
	updateMsgPinStmt                          *sql.Stmt
	updateMsgRevokeStmt                       *sql.Stmt
	updateMsgTopStmt                          *sql.Stmt
	updateSettingDisturbStmt                  *sql.Stmt
	updateSettingLeaderStmt                   *sql.Stmt
	updateSettingNickNameStmt                 *sql.Stmt
	updateSettingPinStmt                      *sql.Stmt
	updateSettingShowStmt                     *sql.Stmt
	updateUserStmt                            *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                        tx,
		tx:                                        tx,
		countAccountsByUserIDStmt:                 q.countAccountsByUserIDStmt,
		createAccountStmt:                         q.createAccountStmt,
		createApplicationStmt:                     q.createApplicationStmt,
		createFileStmt:                            q.createFileStmt,
		createFriendRelationStmt:                  q.createFriendRelationStmt,
		createGroupRelationStmt:                   q.createGroupRelationStmt,
		createMessageStmt:                         q.createMessageStmt,
		createMessageReturnStmt:                   q.createMessageReturnStmt,
		createSettingStmt:                         q.createSettingStmt,
		createUserStmt:                            q.createUserStmt,
		deleteAccountStmt:                         q.deleteAccountStmt,
		deleteAccountsByUserIDStmt:                q.deleteAccountsByUserIDStmt,
		deleteApplicationStmt:                     q.deleteApplicationStmt,
		deleteFileByIDStmt:                        q.deleteFileByIDStmt,
		deleteFriendRelationsByAccountIDStmt:      q.deleteFriendRelationsByAccountIDStmt,
		deleteRelationStmt:                        q.deleteRelationStmt,
		deleteSettingStmt:                         q.deleteSettingStmt,
		deleteSettingsByAccountIDStmt:             q.deleteSettingsByAccountIDStmt,
		deleteUserStmt:                            q.deleteUserStmt,
		existEmailStmt:                            q.existEmailStmt,
		existRelationStmt:                         q.existRelationStmt,
		existsAccountByIDStmt:                     q.existsAccountByIDStmt,
		existsAccountByNameAndUserIDStmt:          q.existsAccountByNameAndUserIDStmt,
		existsApplicationByIDWithLockStmt:         q.existsApplicationByIDWithLockStmt,
		existsFriendRelationStmt:                  q.existsFriendRelationStmt,
		existsFriendSettingStmt:                   q.existsFriendSettingStmt,
		existsGroupLeaderByAccountIDWithLockStmt:  q.existsGroupLeaderByAccountIDWithLockStmt,
		existsIsLeaderStmt:                        q.existsIsLeaderStmt,
		existsSettingStmt:                         q.existsSettingStmt,
		existsUserByIDStmt:                        q.existsUserByIDStmt,
		getAccountByIDStmt:                        q.getAccountByIDStmt,
		getAccountIDsByMsgIDStmt:                  q.getAccountIDsByMsgIDStmt,
		getAccountIDsByRelationIDStmt:             q.getAccountIDsByRelationIDStmt,
		getAccountIDsByUserIDStmt:                 q.getAccountIDsByUserIDStmt,
		getAccountInfoByIDStmt:                    q.getAccountInfoByIDStmt,
		getAccountsByNameStmt:                     q.getAccountsByNameStmt,
		getAccountsByUserIDStmt:                   q.getAccountsByUserIDStmt,
		getAcountIDsByUserIDStmt:                  q.getAcountIDsByUserIDStmt,
		getAllEmailStmt:                           q.getAllEmailStmt,
		getAllGroupRelationStmt:                   q.getAllGroupRelationStmt,
		getAllRelationIDsStmt:                     q.getAllRelationIDsStmt,
		getAllRelationOnRelationStmt:              q.getAllRelationOnRelationStmt,
		getApplicationByIDStmt:                    q.getApplicationByIDStmt,
		getApplicationsStmt:                       q.getApplicationsStmt,
		getApplicationsCreatTimeStmt:              q.getApplicationsCreatTimeStmt,
		getApplicationsStatusStmt:                 q.getApplicationsStatusStmt,
		getCreateFileStmt:                         q.getCreateFileStmt,
		getFileByRelationStmt:                     q.getFileByRelationStmt,
		getFileByRelationIDStmt:                   q.getFileByRelationIDStmt,
		getFileDetailsByIDStmt:                    q.getFileDetailsByIDStmt,
		getFileKeyByIDStmt:                        q.getFileKeyByIDStmt,
		getFriendPinSettingsOrderByPinTimeStmt:    q.getFriendPinSettingsOrderByPinTimeStmt,
		getFriendRelationByIDStmt:                 q.getFriendRelationByIDStmt,
		getFriendRelationIDsByAccountIDStmt:       q.getFriendRelationIDsByAccountIDStmt,
		getFriendRelationIdByID1AndID1Stmt:        q.getFriendRelationIdByID1AndID1Stmt,
		getFriendSettingsByNameStmt:               q.getFriendSettingsByNameStmt,
		getFriendSettingsOrderByNameStmt:          q.getFriendSettingsOrderByNameStmt,
		getFriendShowSettingsOrderByShowTimeStmt:  q.getFriendShowSettingsOrderByShowTimeStmt,
		getGroupAvatarStmt:                        q.getGroupAvatarStmt,
		getGroupAvatarByIDStmt:                    q.getGroupAvatarByIDStmt,
		getGroupListStmt:                          q.getGroupListStmt,
		getGroupMembersByIDStmt:                   q.getGroupMembersByIDStmt,
		getGroupPinSettingsOrderByPinTimeStmt:     q.getGroupPinSettingsOrderByPinTimeStmt,
		getGroupRelationByIDStmt:                  q.getGroupRelationByIDStmt,
		getGroupRelationsIdStmt:                   q.getGroupRelationsIdStmt,
		getGroupSettingsByNameStmt:                q.getGroupSettingsByNameStmt,
		getGroupShowSettingsOrderByShowTimeStmt:   q.getGroupShowSettingsOrderByShowTimeStmt,
		getMessageAndNameByIDStmt:                 q.getMessageAndNameByIDStmt,
		getMessageByIDStmt:                        q.getMessageByIDStmt,
		getMessageInfoTxStmt:                      q.getMessageInfoTxStmt,
		getMsgDeleteByIdStmt:                      q.getMsgDeleteByIdStmt,
		getMsgsByContentStmt:                      q.getMsgsByContentStmt,
		getMsgsByContentAndRelationStmt:           q.getMsgsByContentAndRelationStmt,
		getMsgsByRelationIDAndTimeStmt:            q.getMsgsByRelationIDAndTimeStmt,
		getNickNameByAccountIDAndRelationStmt:     q.getNickNameByAccountIDAndRelationStmt,
		getPinMsgsByRelationIDStmt:                q.getPinMsgsByRelationIDStmt,
		getRelationIDByAccountIDStmt:              q.getRelationIDByAccountIDStmt,
		getRelationIDsByAccountIDFromSettingsStmt: q.getRelationIDsByAccountIDFromSettingsStmt,
		getRlyMsgsInfoByMsgIDStmt:                 q.getRlyMsgsInfoByMsgIDStmt,
		getSettingByIDStmt:                        q.getSettingByIDStmt,
		getTopMsgByRelationIDStmt:                 q.getTopMsgByRelationIDStmt,
		getUserByEmailStmt:                        q.getUserByEmailStmt,
		getUserByIDStmt:                           q.getUserByIDStmt,
		offerMsgsByAccountIDAndTimeStmt:           q.offerMsgsByAccountIDAndTimeStmt,
		transferIsLeaderFalseStmt:                 q.transferIsLeaderFalseStmt,
		transferIsLeaderTrueStmt:                  q.transferIsLeaderTrueStmt,
		updateAccountStmt:                         q.updateAccountStmt,
		updateAccountAvatarStmt:                   q.updateAccountAvatarStmt,
		updateApplicationStmt:                     q.updateApplicationStmt,
		updateGroupAvatarStmt:                     q.updateGroupAvatarStmt,
		updateGroupRelationStmt:                   q.updateGroupRelationStmt,
		updateMsgDeleteStmt:                       q.updateMsgDeleteStmt,
		updateMsgPinStmt:                          q.updateMsgPinStmt,
		updateMsgRevokeStmt:                       q.updateMsgRevokeStmt,
		updateMsgTopStmt:                          q.updateMsgTopStmt,
		updateSettingDisturbStmt:                  q.updateSettingDisturbStmt,
		updateSettingLeaderStmt:                   q.updateSettingLeaderStmt,
		updateSettingNickNameStmt:                 q.updateSettingNickNameStmt,
		updateSettingPinStmt:                      q.updateSettingPinStmt,
		updateSettingShowStmt:                     q.updateSettingShowStmt,
		updateUserStmt:                            q.updateUserStmt,
	}
}
