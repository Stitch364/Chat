// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.countAccountsByUserIDStmt, err = db.PrepareContext(ctx, countAccountsByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query CountAccountsByUserID: %w", err)
	}
	if q.createAccountStmt, err = db.PrepareContext(ctx, createAccount); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAccount: %w", err)
	}
	if q.createApplicationStmt, err = db.PrepareContext(ctx, createApplication); err != nil {
		return nil, fmt.Errorf("error preparing query CreateApplication: %w", err)
	}
	if q.createFriendRelationStmt, err = db.PrepareContext(ctx, createFriendRelation); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFriendRelation: %w", err)
	}
	if q.createMessageStmt, err = db.PrepareContext(ctx, createMessage); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMessage: %w", err)
	}
	if q.createSettingStmt, err = db.PrepareContext(ctx, createSetting); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSetting: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteAccountStmt, err = db.PrepareContext(ctx, deleteAccount); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAccount: %w", err)
	}
	if q.deleteAccountsByUserIDStmt, err = db.PrepareContext(ctx, deleteAccountsByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAccountsByUserID: %w", err)
	}
	if q.deleteApplicationStmt, err = db.PrepareContext(ctx, deleteApplication); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteApplication: %w", err)
	}
	if q.deleteFriendRelationsByAccountIDStmt, err = db.PrepareContext(ctx, deleteFriendRelationsByAccountID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFriendRelationsByAccountID: %w", err)
	}
	if q.deleteSettingsByAccountIDStmt, err = db.PrepareContext(ctx, deleteSettingsByAccountID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSettingsByAccountID: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.existEmailStmt, err = db.PrepareContext(ctx, existEmail); err != nil {
		return nil, fmt.Errorf("error preparing query ExistEmail: %w", err)
	}
	if q.existsAccountByIDStmt, err = db.PrepareContext(ctx, existsAccountByID); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsAccountByID: %w", err)
	}
	if q.existsAccountByNameAndUserIDStmt, err = db.PrepareContext(ctx, existsAccountByNameAndUserID); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsAccountByNameAndUserID: %w", err)
	}
	if q.existsApplicationByIDWithLockStmt, err = db.PrepareContext(ctx, existsApplicationByIDWithLock); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsApplicationByIDWithLock: %w", err)
	}
	if q.existsGroupLeaderByAccountIDWithLockStmt, err = db.PrepareContext(ctx, existsGroupLeaderByAccountIDWithLock); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsGroupLeaderByAccountIDWithLock: %w", err)
	}
	if q.existsSettingStmt, err = db.PrepareContext(ctx, existsSetting); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsSetting: %w", err)
	}
	if q.existsUserByIDStmt, err = db.PrepareContext(ctx, existsUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsUserByID: %w", err)
	}
	if q.getAccountByIDStmt, err = db.PrepareContext(ctx, getAccountByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountByID: %w", err)
	}
	if q.getAccountIDsByUserIDStmt, err = db.PrepareContext(ctx, getAccountIDsByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountIDsByUserID: %w", err)
	}
	if q.getAccountsByNameStmt, err = db.PrepareContext(ctx, getAccountsByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountsByName: %w", err)
	}
	if q.getAccountsByUserIDStmt, err = db.PrepareContext(ctx, getAccountsByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAccountsByUserID: %w", err)
	}
	if q.getAllEmailStmt, err = db.PrepareContext(ctx, getAllEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllEmail: %w", err)
	}
	if q.getApplicationByIDStmt, err = db.PrepareContext(ctx, getApplicationByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetApplicationByID: %w", err)
	}
	if q.getApplicationsStmt, err = db.PrepareContext(ctx, getApplications); err != nil {
		return nil, fmt.Errorf("error preparing query GetApplications: %w", err)
	}
	if q.getFriendRelationIDsByAccountIDStmt, err = db.PrepareContext(ctx, getFriendRelationIDsByAccountID); err != nil {
		return nil, fmt.Errorf("error preparing query GetFriendRelationIDsByAccountID: %w", err)
	}
	if q.getFriendRelationIdByID1AndID1Stmt, err = db.PrepareContext(ctx, getFriendRelationIdByID1AndID1); err != nil {
		return nil, fmt.Errorf("error preparing query GetFriendRelationIdByID1AndID1: %w", err)
	}
	if q.getMessageByIDStmt, err = db.PrepareContext(ctx, getMessageByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetMessageByID: %w", err)
	}
	if q.getMessageInfoTxStmt, err = db.PrepareContext(ctx, getMessageInfoTx); err != nil {
		return nil, fmt.Errorf("error preparing query GetMessageInfoTx: %w", err)
	}
	if q.getMsgsByContentStmt, err = db.PrepareContext(ctx, getMsgsByContent); err != nil {
		return nil, fmt.Errorf("error preparing query GetMsgsByContent: %w", err)
	}
	if q.getMsgsByContentAndRelationStmt, err = db.PrepareContext(ctx, getMsgsByContentAndRelation); err != nil {
		return nil, fmt.Errorf("error preparing query GetMsgsByContentAndRelation: %w", err)
	}
	if q.getMsgsByRelationIDAndTimeStmt, err = db.PrepareContext(ctx, getMsgsByRelationIDAndTime); err != nil {
		return nil, fmt.Errorf("error preparing query GetMsgsByRelationIDAndTime: %w", err)
	}
	if q.getPinMsgsByRelationIDStmt, err = db.PrepareContext(ctx, getPinMsgsByRelationID); err != nil {
		return nil, fmt.Errorf("error preparing query GetPinMsgsByRelationID: %w", err)
	}
	if q.getRelationIDsByAccountIDFromSettingsStmt, err = db.PrepareContext(ctx, getRelationIDsByAccountIDFromSettings); err != nil {
		return nil, fmt.Errorf("error preparing query GetRelationIDsByAccountIDFromSettings: %w", err)
	}
	if q.getRlyMsgsInfoByMsgIDStmt, err = db.PrepareContext(ctx, getRlyMsgsInfoByMsgID); err != nil {
		return nil, fmt.Errorf("error preparing query GetRlyMsgsInfoByMsgID: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.offerMsgsByAccountIDAndTimeStmt, err = db.PrepareContext(ctx, offerMsgsByAccountIDAndTime); err != nil {
		return nil, fmt.Errorf("error preparing query OfferMsgsByAccountIDAndTime: %w", err)
	}
	if q.updateAccountStmt, err = db.PrepareContext(ctx, updateAccount); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAccount: %w", err)
	}
	if q.updateAccountAvatarStmt, err = db.PrepareContext(ctx, updateAccountAvatar); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAccountAvatar: %w", err)
	}
	if q.updateApplicationStmt, err = db.PrepareContext(ctx, updateApplication); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateApplication: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.countAccountsByUserIDStmt != nil {
		if cerr := q.countAccountsByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countAccountsByUserIDStmt: %w", cerr)
		}
	}
	if q.createAccountStmt != nil {
		if cerr := q.createAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAccountStmt: %w", cerr)
		}
	}
	if q.createApplicationStmt != nil {
		if cerr := q.createApplicationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createApplicationStmt: %w", cerr)
		}
	}
	if q.createFriendRelationStmt != nil {
		if cerr := q.createFriendRelationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFriendRelationStmt: %w", cerr)
		}
	}
	if q.createMessageStmt != nil {
		if cerr := q.createMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMessageStmt: %w", cerr)
		}
	}
	if q.createSettingStmt != nil {
		if cerr := q.createSettingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSettingStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteAccountStmt != nil {
		if cerr := q.deleteAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAccountStmt: %w", cerr)
		}
	}
	if q.deleteAccountsByUserIDStmt != nil {
		if cerr := q.deleteAccountsByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAccountsByUserIDStmt: %w", cerr)
		}
	}
	if q.deleteApplicationStmt != nil {
		if cerr := q.deleteApplicationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteApplicationStmt: %w", cerr)
		}
	}
	if q.deleteFriendRelationsByAccountIDStmt != nil {
		if cerr := q.deleteFriendRelationsByAccountIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFriendRelationsByAccountIDStmt: %w", cerr)
		}
	}
	if q.deleteSettingsByAccountIDStmt != nil {
		if cerr := q.deleteSettingsByAccountIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSettingsByAccountIDStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.existEmailStmt != nil {
		if cerr := q.existEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existEmailStmt: %w", cerr)
		}
	}
	if q.existsAccountByIDStmt != nil {
		if cerr := q.existsAccountByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsAccountByIDStmt: %w", cerr)
		}
	}
	if q.existsAccountByNameAndUserIDStmt != nil {
		if cerr := q.existsAccountByNameAndUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsAccountByNameAndUserIDStmt: %w", cerr)
		}
	}
	if q.existsApplicationByIDWithLockStmt != nil {
		if cerr := q.existsApplicationByIDWithLockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsApplicationByIDWithLockStmt: %w", cerr)
		}
	}
	if q.existsGroupLeaderByAccountIDWithLockStmt != nil {
		if cerr := q.existsGroupLeaderByAccountIDWithLockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsGroupLeaderByAccountIDWithLockStmt: %w", cerr)
		}
	}
	if q.existsSettingStmt != nil {
		if cerr := q.existsSettingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsSettingStmt: %w", cerr)
		}
	}
	if q.existsUserByIDStmt != nil {
		if cerr := q.existsUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsUserByIDStmt: %w", cerr)
		}
	}
	if q.getAccountByIDStmt != nil {
		if cerr := q.getAccountByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountByIDStmt: %w", cerr)
		}
	}
	if q.getAccountIDsByUserIDStmt != nil {
		if cerr := q.getAccountIDsByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountIDsByUserIDStmt: %w", cerr)
		}
	}
	if q.getAccountsByNameStmt != nil {
		if cerr := q.getAccountsByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountsByNameStmt: %w", cerr)
		}
	}
	if q.getAccountsByUserIDStmt != nil {
		if cerr := q.getAccountsByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAccountsByUserIDStmt: %w", cerr)
		}
	}
	if q.getAllEmailStmt != nil {
		if cerr := q.getAllEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllEmailStmt: %w", cerr)
		}
	}
	if q.getApplicationByIDStmt != nil {
		if cerr := q.getApplicationByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getApplicationByIDStmt: %w", cerr)
		}
	}
	if q.getApplicationsStmt != nil {
		if cerr := q.getApplicationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getApplicationsStmt: %w", cerr)
		}
	}
	if q.getFriendRelationIDsByAccountIDStmt != nil {
		if cerr := q.getFriendRelationIDsByAccountIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFriendRelationIDsByAccountIDStmt: %w", cerr)
		}
	}
	if q.getFriendRelationIdByID1AndID1Stmt != nil {
		if cerr := q.getFriendRelationIdByID1AndID1Stmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFriendRelationIdByID1AndID1Stmt: %w", cerr)
		}
	}
	if q.getMessageByIDStmt != nil {
		if cerr := q.getMessageByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMessageByIDStmt: %w", cerr)
		}
	}
	if q.getMessageInfoTxStmt != nil {
		if cerr := q.getMessageInfoTxStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMessageInfoTxStmt: %w", cerr)
		}
	}
	if q.getMsgsByContentStmt != nil {
		if cerr := q.getMsgsByContentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMsgsByContentStmt: %w", cerr)
		}
	}
	if q.getMsgsByContentAndRelationStmt != nil {
		if cerr := q.getMsgsByContentAndRelationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMsgsByContentAndRelationStmt: %w", cerr)
		}
	}
	if q.getMsgsByRelationIDAndTimeStmt != nil {
		if cerr := q.getMsgsByRelationIDAndTimeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMsgsByRelationIDAndTimeStmt: %w", cerr)
		}
	}
	if q.getPinMsgsByRelationIDStmt != nil {
		if cerr := q.getPinMsgsByRelationIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPinMsgsByRelationIDStmt: %w", cerr)
		}
	}
	if q.getRelationIDsByAccountIDFromSettingsStmt != nil {
		if cerr := q.getRelationIDsByAccountIDFromSettingsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRelationIDsByAccountIDFromSettingsStmt: %w", cerr)
		}
	}
	if q.getRlyMsgsInfoByMsgIDStmt != nil {
		if cerr := q.getRlyMsgsInfoByMsgIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRlyMsgsInfoByMsgIDStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.offerMsgsByAccountIDAndTimeStmt != nil {
		if cerr := q.offerMsgsByAccountIDAndTimeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing offerMsgsByAccountIDAndTimeStmt: %w", cerr)
		}
	}
	if q.updateAccountStmt != nil {
		if cerr := q.updateAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAccountStmt: %w", cerr)
		}
	}
	if q.updateAccountAvatarStmt != nil {
		if cerr := q.updateAccountAvatarStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAccountAvatarStmt: %w", cerr)
		}
	}
	if q.updateApplicationStmt != nil {
		if cerr := q.updateApplicationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateApplicationStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                        DBTX
	tx                                        *sql.Tx
	countAccountsByUserIDStmt                 *sql.Stmt
	createAccountStmt                         *sql.Stmt
	createApplicationStmt                     *sql.Stmt
	createFriendRelationStmt                  *sql.Stmt
	createMessageStmt                         *sql.Stmt
	createSettingStmt                         *sql.Stmt
	createUserStmt                            *sql.Stmt
	deleteAccountStmt                         *sql.Stmt
	deleteAccountsByUserIDStmt                *sql.Stmt
	deleteApplicationStmt                     *sql.Stmt
	deleteFriendRelationsByAccountIDStmt      *sql.Stmt
	deleteSettingsByAccountIDStmt             *sql.Stmt
	deleteUserStmt                            *sql.Stmt
	existEmailStmt                            *sql.Stmt
	existsAccountByIDStmt                     *sql.Stmt
	existsAccountByNameAndUserIDStmt          *sql.Stmt
	existsApplicationByIDWithLockStmt         *sql.Stmt
	existsGroupLeaderByAccountIDWithLockStmt  *sql.Stmt
	existsSettingStmt                         *sql.Stmt
	existsUserByIDStmt                        *sql.Stmt
	getAccountByIDStmt                        *sql.Stmt
	getAccountIDsByUserIDStmt                 *sql.Stmt
	getAccountsByNameStmt                     *sql.Stmt
	getAccountsByUserIDStmt                   *sql.Stmt
	getAllEmailStmt                           *sql.Stmt
	getApplicationByIDStmt                    *sql.Stmt
	getApplicationsStmt                       *sql.Stmt
	getFriendRelationIDsByAccountIDStmt       *sql.Stmt
	getFriendRelationIdByID1AndID1Stmt        *sql.Stmt
	getMessageByIDStmt                        *sql.Stmt
	getMessageInfoTxStmt                      *sql.Stmt
	getMsgsByContentStmt                      *sql.Stmt
	getMsgsByContentAndRelationStmt           *sql.Stmt
	getMsgsByRelationIDAndTimeStmt            *sql.Stmt
	getPinMsgsByRelationIDStmt                *sql.Stmt
	getRelationIDsByAccountIDFromSettingsStmt *sql.Stmt
	getRlyMsgsInfoByMsgIDStmt                 *sql.Stmt
	getUserByEmailStmt                        *sql.Stmt
	getUserByIDStmt                           *sql.Stmt
	offerMsgsByAccountIDAndTimeStmt           *sql.Stmt
	updateAccountStmt                         *sql.Stmt
	updateAccountAvatarStmt                   *sql.Stmt
	updateApplicationStmt                     *sql.Stmt
	updateUserStmt                            *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                        tx,
		tx:                                        tx,
		countAccountsByUserIDStmt:                 q.countAccountsByUserIDStmt,
		createAccountStmt:                         q.createAccountStmt,
		createApplicationStmt:                     q.createApplicationStmt,
		createFriendRelationStmt:                  q.createFriendRelationStmt,
		createMessageStmt:                         q.createMessageStmt,
		createSettingStmt:                         q.createSettingStmt,
		createUserStmt:                            q.createUserStmt,
		deleteAccountStmt:                         q.deleteAccountStmt,
		deleteAccountsByUserIDStmt:                q.deleteAccountsByUserIDStmt,
		deleteApplicationStmt:                     q.deleteApplicationStmt,
		deleteFriendRelationsByAccountIDStmt:      q.deleteFriendRelationsByAccountIDStmt,
		deleteSettingsByAccountIDStmt:             q.deleteSettingsByAccountIDStmt,
		deleteUserStmt:                            q.deleteUserStmt,
		existEmailStmt:                            q.existEmailStmt,
		existsAccountByIDStmt:                     q.existsAccountByIDStmt,
		existsAccountByNameAndUserIDStmt:          q.existsAccountByNameAndUserIDStmt,
		existsApplicationByIDWithLockStmt:         q.existsApplicationByIDWithLockStmt,
		existsGroupLeaderByAccountIDWithLockStmt:  q.existsGroupLeaderByAccountIDWithLockStmt,
		existsSettingStmt:                         q.existsSettingStmt,
		existsUserByIDStmt:                        q.existsUserByIDStmt,
		getAccountByIDStmt:                        q.getAccountByIDStmt,
		getAccountIDsByUserIDStmt:                 q.getAccountIDsByUserIDStmt,
		getAccountsByNameStmt:                     q.getAccountsByNameStmt,
		getAccountsByUserIDStmt:                   q.getAccountsByUserIDStmt,
		getAllEmailStmt:                           q.getAllEmailStmt,
		getApplicationByIDStmt:                    q.getApplicationByIDStmt,
		getApplicationsStmt:                       q.getApplicationsStmt,
		getFriendRelationIDsByAccountIDStmt:       q.getFriendRelationIDsByAccountIDStmt,
		getFriendRelationIdByID1AndID1Stmt:        q.getFriendRelationIdByID1AndID1Stmt,
		getMessageByIDStmt:                        q.getMessageByIDStmt,
		getMessageInfoTxStmt:                      q.getMessageInfoTxStmt,
		getMsgsByContentStmt:                      q.getMsgsByContentStmt,
		getMsgsByContentAndRelationStmt:           q.getMsgsByContentAndRelationStmt,
		getMsgsByRelationIDAndTimeStmt:            q.getMsgsByRelationIDAndTimeStmt,
		getPinMsgsByRelationIDStmt:                q.getPinMsgsByRelationIDStmt,
		getRelationIDsByAccountIDFromSettingsStmt: q.getRelationIDsByAccountIDFromSettingsStmt,
		getRlyMsgsInfoByMsgIDStmt:                 q.getRlyMsgsInfoByMsgIDStmt,
		getUserByEmailStmt:                        q.getUserByEmailStmt,
		getUserByIDStmt:                           q.getUserByIDStmt,
		offerMsgsByAccountIDAndTimeStmt:           q.offerMsgsByAccountIDAndTimeStmt,
		updateAccountStmt:                         q.updateAccountStmt,
		updateAccountAvatarStmt:                   q.updateAccountAvatarStmt,
		updateApplicationStmt:                     q.updateApplicationStmt,
		updateUserStmt:                            q.updateUserStmt,
	}
}
