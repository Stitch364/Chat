// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"
)

type AccountsGender string

const (
	AccountsGenderValue0 AccountsGender = "男"
	AccountsGenderValue1 AccountsGender = "女"
	AccountsGenderValue2 AccountsGender = "未知"
)

func (e *AccountsGender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountsGender(s)
	case string:
		*e = AccountsGender(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountsGender: %T", src)
	}
	return nil
}

type NullAccountsGender struct {
	AccountsGender AccountsGender
	Valid          bool // Valid is true if AccountsGender is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountsGender) Scan(value interface{}) error {
	if value == nil {
		ns.AccountsGender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountsGender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountsGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountsGender), nil
}

type ApplicationsStatus string

const (
	ApplicationsStatusValue0 ApplicationsStatus = "已申请"
	ApplicationsStatusValue1 ApplicationsStatus = "已同意"
	ApplicationsStatusValue2 ApplicationsStatus = "已拒绝"
	ApplicationsStatusValue3 ApplicationsStatus = "等待验证"
)

func (e *ApplicationsStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ApplicationsStatus(s)
	case string:
		*e = ApplicationsStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ApplicationsStatus: %T", src)
	}
	return nil
}

type NullApplicationsStatus struct {
	ApplicationsStatus ApplicationsStatus
	Valid              bool // Valid is true if ApplicationsStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullApplicationsStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ApplicationsStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ApplicationsStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullApplicationsStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ApplicationsStatus), nil
}

type FilesFileType string

const (
	FilesFileTypeImage FilesFileType = "image"
	FilesFileTypeFile  FilesFileType = "file"
)

func (e *FilesFileType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FilesFileType(s)
	case string:
		*e = FilesFileType(s)
	default:
		return fmt.Errorf("unsupported scan type for FilesFileType: %T", src)
	}
	return nil
}

type NullFilesFileType struct {
	FilesFileType FilesFileType
	Valid         bool // Valid is true if FilesFileType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFilesFileType) Scan(value interface{}) error {
	if value == nil {
		ns.FilesFileType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FilesFileType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFilesFileType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FilesFileType), nil
}

type MessagesMsgType string

const (
	MessagesMsgTypeText MessagesMsgType = "text"
	MessagesMsgTypeFile MessagesMsgType = "file"
)

func (e *MessagesMsgType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MessagesMsgType(s)
	case string:
		*e = MessagesMsgType(s)
	default:
		return fmt.Errorf("unsupported scan type for MessagesMsgType: %T", src)
	}
	return nil
}

type NullMessagesMsgType struct {
	MessagesMsgType MessagesMsgType
	Valid           bool // Valid is true if MessagesMsgType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMessagesMsgType) Scan(value interface{}) error {
	if value == nil {
		ns.MessagesMsgType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MessagesMsgType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMessagesMsgType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MessagesMsgType), nil
}

type MessagesNotifyType string

const (
	MessagesNotifyTypeSystem MessagesNotifyType = "system"
	MessagesNotifyTypeCommon MessagesNotifyType = "common"
)

func (e *MessagesNotifyType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MessagesNotifyType(s)
	case string:
		*e = MessagesNotifyType(s)
	default:
		return fmt.Errorf("unsupported scan type for MessagesNotifyType: %T", src)
	}
	return nil
}

type NullMessagesNotifyType struct {
	MessagesNotifyType MessagesNotifyType
	Valid              bool // Valid is true if MessagesNotifyType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMessagesNotifyType) Scan(value interface{}) error {
	if value == nil {
		ns.MessagesNotifyType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MessagesNotifyType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMessagesNotifyType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MessagesNotifyType), nil
}

type RelationsRelation string

const (
	RelationsRelationGroup  RelationsRelation = "group"
	RelationsRelationFriend RelationsRelation = "friend"
)

func (e *RelationsRelation) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RelationsRelation(s)
	case string:
		*e = RelationsRelation(s)
	default:
		return fmt.Errorf("unsupported scan type for RelationsRelation: %T", src)
	}
	return nil
}

type NullRelationsRelation struct {
	RelationsRelation RelationsRelation
	Valid             bool // Valid is true if RelationsRelation is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRelationsRelation) Scan(value interface{}) error {
	if value == nil {
		ns.RelationsRelation, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RelationsRelation.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRelationsRelation) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RelationsRelation), nil
}

type Account struct {
	ID        int64
	UserID    int64
	Name      string
	Avatar    string
	Gender    AccountsGender
	Signature string
	CreatedAt time.Time
}

type Application struct {
	Account1ID int64
	Account2ID int64
	ApplyMsg   string
	RefuseMsg  string
	Status     ApplicationsStatus
	CreateAt   time.Time
	UpdateAt   time.Time
}

type File struct {
	ID         int64
	FileName   string
	FileType   FilesFileType
	FileSize   int64
	FileKey    string
	Url        string
	RelationID sql.NullInt64
	AccountID  sql.NullInt64
	CreateAt   time.Time
}

type GroupNotify struct {
	ID         int64
	RelationID sql.NullInt64
	MsgContent string
	MsgExpand  json.RawMessage
	AccountID  sql.NullInt64
	CreateAt   time.Time
	ReadIds    json.RawMessage
}

type Message struct {
	ID         int64
	NotifyType MessagesNotifyType
	MsgType    MessagesMsgType
	MsgContent string
	MsgExtend  json.RawMessage
	FileID     sql.NullInt64
	AccountID  sql.NullInt64
	RlyMsgID   sql.NullInt64
	RelationID int64
	CreateAt   time.Time
	IsRevoke   bool
	IsTop      bool
	IsPin      bool
	PinTime    time.Time
	ReadIds    json.RawMessage
}

type Relation struct {
	ID          int64
	Relation    RelationsRelation
	Name        sql.NullString
	Description sql.NullString
	Avatar      sql.NullString
	Account1ID  sql.NullInt64
	Account2ID  sql.NullInt64
	CreatedAt   time.Time
}

type Setting struct {
	AccountID    int64
	RelationID   int64
	NickName     string
	IsNotDisturb bool
	IsPin        bool
	PinTime      time.Time
	IsShow       bool
	LastShow     time.Time
	IsLeader     bool
	IsSelf       bool
}

type User struct {
	ID        int64
	Email     string
	Password  string
	CreatedAt time.Time
}
