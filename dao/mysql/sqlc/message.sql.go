// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: message.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"
)

const createMessage = `-- name: CreateMessage :exec
insert into messages
(notify_type, msg_type, msg_content, msg_extend, file_id, account_id, rly_msg_id, relation_id)
values
(?,?,?,?,?,?,?,?)
`

type CreateMessageParams struct {
	NotifyType MessagesNotifyType
	MsgType    MessagesMsgType
	MsgContent string
	MsgExtend  json.RawMessage
	FileID     sql.NullInt64
	AccountID  sql.NullInt64
	RlyMsgID   sql.NullInt64
	RelationID int64
}

func (q *Queries) CreateMessage(ctx context.Context, arg *CreateMessageParams) error {
	_, err := q.exec(ctx, q.createMessageStmt, createMessage,
		arg.NotifyType,
		arg.MsgType,
		arg.MsgContent,
		arg.MsgExtend,
		arg.FileID,
		arg.AccountID,
		arg.RlyMsgID,
		arg.RelationID,
	)
	return err
}

const getMessageByID = `-- name: GetMessageByID :one
select id, notify_type, msg_type, msg_content, msg_extend, file_id, account_id,
       rly_msg_id, relation_id, create_at, is_revoke, is_top, is_pin, pin_time, read_ids
from messages
where id = ?
limit 1
`

func (q *Queries) GetMessageByID(ctx context.Context, id int64) (*Message, error) {
	row := q.queryRow(ctx, q.getMessageByIDStmt, getMessageByID, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.NotifyType,
		&i.MsgType,
		&i.MsgContent,
		&i.MsgExtend,
		&i.FileID,
		&i.AccountID,
		&i.RlyMsgID,
		&i.RelationID,
		&i.CreateAt,
		&i.IsRevoke,
		&i.IsTop,
		&i.IsPin,
		&i.PinTime,
		&i.ReadIds,
	)
	return &i, err
}

const getMessageInfoTx = `-- name: GetMessageInfoTx :one
SELECT id, msg_content, msg_extend,file_id, create_at
FROM messages
WHERE id = LAST_INSERT_ID()
`

type GetMessageInfoTxRow struct {
	ID         int64
	MsgContent string
	MsgExtend  json.RawMessage
	FileID     sql.NullInt64
	CreateAt   time.Time
}

func (q *Queries) GetMessageInfoTx(ctx context.Context) (*GetMessageInfoTxRow, error) {
	row := q.queryRow(ctx, q.getMessageInfoTxStmt, getMessageInfoTx)
	var i GetMessageInfoTxRow
	err := row.Scan(
		&i.ID,
		&i.MsgContent,
		&i.MsgExtend,
		&i.FileID,
		&i.CreateAt,
	)
	return &i, err
}

const updateMsgReads = `-- name: UpdateMsgReads :exec
update messages
set read_ids = json_array_append(read_ids, '$', @accountID)
where relation_id = ?
`

func (q *Queries) UpdateMsgReads(ctx context.Context, relationID int64) error {
	_, err := q.exec(ctx, q.updateMsgReadsStmt, updateMsgReads, relationID)
	return err
}
